#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
version: '2'

services:
  user.ui.agent.example.com:
    container_name: user.ui.agent.example.com
    image: ${USER_AGENT_IMAGE}:latest
    volumes:
      - ../keys/tls:/etc/nginx/certs
    ports:
      - 8091:443
    environment:
      - HTTP_RESOLVER_URL=${HTTP_RESOLVER}
      - AGENT_DEFAULT_LABEL=user-agent
      - BLOC_DOMAIN=testnet.trustbloc.local
      - EDGE_AGENT_SERVER=https://user.agent.example.com:8090
      - WALLET_MEDIATOR_URL=${WALLET_ROUTER_URL}
      - TLS_CERT=/etc/nginx/certs/ec-pubCert.pem
      - TLS_KEY=/etc/nginx/certs/ec-key.pem
      - EDV_SERVER_URL=https://edv.example.com:8072/encrypted-data-vaults
      - STORAGE_TYPE=indexedDB

  second.ui.user.agent.example.com:
    container_name: second.ui.user.agent.example.com
    image: ${USER_AGENT_IMAGE}:latest
    volumes:
      - ../keys/tls:/etc/nginx/certs
    ports:
      - 8071:443
    environment:
      - HTTP_RESOLVER_URL=${HTTP_RESOLVER}
      - AGENT_DEFAULT_LABEL=user-agent
      - BLOC_DOMAIN=testnet.trustbloc.local
      - EDGE_AGENT_SERVER=https://second.user.agent.example.com:8070
      - WALLET_MEDIATOR_URL=${WALLET_ROUTER_URL}
      - TLS_CERT=/etc/nginx/certs/ec-pubCert.pem
      - TLS_KEY=/etc/nginx/certs/ec-key.pem
      - EDV_SERVER_URL=https://edv.example.com:8072/encrypted-data-vaults
      - STORAGE_TYPE=indexedDB

  edge.router.agent.example.com:
    container_name: edge.router.agent.example.com
    image: ${HUB_ROUTER_IMAGE}:${HUB_ROUTER_IMAGE_TAG}
    environment:
      - HUB_ROUTER_HOST_URL=${EDGE_ROUTER_HOST}:${EDGE_ROUTER_API_PORT}
      - HUB_ROUTER_TLS_CACERTS=/etc/tls/ec-cacert.pem
      - HUB_ROUTER_TLS_SYSTEMCERTPOOL=true
      - HUB_ROUTER_TLS_SERVE_CERT=/etc/tls/ec-pubCert.pem
      - HUB_ROUTER_TLS_SERVE_KEY=/etc/tls/ec-key.pem
      - HUB_ROUTER_DIDCOMM_HTTP_HOST=${EDGE_ROUTER_HOST}:${EDGE_ROUTER_HTTP_INBOUND_PORT}
      - HUB_ROUTER_DIDCOMM_HTTP_HOST_EXTERNAL=https://localhost:${EDGE_ROUTER_HTTP_INBOUND_PORT}
      - HUB_ROUTER_DIDCOMM_WS_HOST=${EDGE_ROUTER_HOST}:${EDGE_ROUTER_WS_INBOUND_PORT}
      - HUB_ROUTER_DIDCOMM_WS_HOST_EXTERNAL=wss://localhost:${EDGE_ROUTER_WS_INBOUND_PORT}
      - HUB_ROUTER_DSN_PERSISTENT=mem://tests
      - HUB_ROUTER_DSN_TRANSIENT=mem://tests
      - HUB_ROUTER_DSN_TIMEOUT=45
    ports:
      - ${EDGE_ROUTER_API_PORT}:${EDGE_ROUTER_API_PORT}
      - ${EDGE_ROUTER_HTTP_INBOUND_PORT}:${EDGE_ROUTER_HTTP_INBOUND_PORT}
      - ${EDGE_ROUTER_WS_INBOUND_PORT}:${EDGE_ROUTER_WS_INBOUND_PORT}
    entrypoint: ""
    command: /bin/sh -c "hub-router start"
    volumes:
      - ../keys/tls:/etc/tls

  edge.router.agent2.example.com:
    container_name: edge.router.agent2.example.com
    image: ${HUB_ROUTER_IMAGE}:${HUB_ROUTER_IMAGE_TAG}
    environment:
      - HUB_ROUTER_HOST_URL=${EDGE_ROUTER2_HOST}:${EDGE_ROUTER2_API_PORT}
      - HUB_ROUTER_TLS_CACERTS=/etc/tls/ec-cacert.pem
      - HUB_ROUTER_TLS_SYSTEMCERTPOOL=true
      - HUB_ROUTER_TLS_SERVE_CERT=/etc/tls/ec-pubCert.pem
      - HUB_ROUTER_TLS_SERVE_KEY=/etc/tls/ec-key.pem
      - HUB_ROUTER_DIDCOMM_HTTP_HOST=${EDGE_ROUTER2_HOST}:${EDGE_ROUTER2_HTTP_INBOUND_PORT}
      - HUB_ROUTER_DIDCOMM_HTTP_HOST_EXTERNAL=https://localhost:${EDGE_ROUTER2_HTTP_INBOUND_PORT}
      - HUB_ROUTER_DIDCOMM_WS_HOST=${EDGE_ROUTER2_HOST}:${EDGE_ROUTER2_WS_INBOUND_PORT}
      - HUB_ROUTER_DIDCOMM_WS_HOST_EXTERNAL=wss://localhost:${EDGE_ROUTER2_WS_INBOUND_PORT}
      - HUB_ROUTER_DSN_PERSISTENT=mem://tests
      - HUB_ROUTER_DSN_TRANSIENT=mem://tests
      - HUB_ROUTER_DSN_TIMEOUT=45
    ports:
      - ${EDGE_ROUTER2_API_PORT}:${EDGE_ROUTER2_API_PORT}
      - ${EDGE_ROUTER2_HTTP_INBOUND_PORT}:${EDGE_ROUTER2_HTTP_INBOUND_PORT}
      - ${EDGE_ROUTER2_WS_INBOUND_PORT}:${EDGE_ROUTER2_WS_INBOUND_PORT}
    entrypoint: ""
    command: /bin/sh -c "hub-router start"
    volumes:
      - ../keys/tls:/etc/tls

  user.agent.example.com:
    container_name: user.agent.example.com
    image: ${USER_AGENT_SUPPORT_IMAGE}:latest
    environment:
      - AGENT_UI_URL=https://user.ui.agent.example.com:8091
      - HTTP_SERVER_HOST_URL=0.0.0.0:8090
      - TLS_CERT_FILE=/etc/keys/tls/ec-pubCert.pem
      - TLS_KEY_FILE=/etc/keys/tls/ec-key.pem
      - TLS_CACERTS=/etc/keys/tls/ec-cacert.pem
      - HTTP_SERVER_OIDC_OPURL=https://demo-hydra.trustbloc.local:5555/
      - HTTP_SERVER_OIDC_CLIENTID=client-id
      - HTTP_SERVER_OIDC_CLIENTSECRET=client-secret
      - HTTP_SERVER_OIDC_CALLBACK=https://user.agent.example.com:8090/oidc/callback
      - HTTP_SERVER_COOKIE_AUTH_KEY=/etc/keys/session_cookies/auth.key
      - HTTP_SERVER_COOKIE_ENC_KEY=/etc/keys/session_cookies/enc.key
      - HTTP_SERVER_RP_DISPLAY_NAME=trustbloc
      - HTTP_SERVER_RP_ORIGIN_NAME=https://user.ui.agent.example.com:8091/
      - HTTP_SERVER_RP_ID=user.ui.agent.example.com
      - HTTP_SERVER_AUTHZ_KMS_URL=https://authz-kms.trustbloc.local:${AUTHZ_HUB_KMS_PORT}
      - HTTP_SERVER_OPS_KMS_URL=https://ops-kms.trustbloc.local:${OPS_HUB_KMS_PORT}
      - HTTP_SERVER_KEY_EDV_URL=https://edv.example.com:${EDV_PORT}/encrypted-data-vaults
      - HTTP_SERVER_USER_EDV_URL=https://edv.example.com:${EDV_PORT}/encrypted-data-vaults
    ports:
      - 8090:8090
    volumes:
      - ../keys:/etc/keys
    command: start
    depends_on:
      - edv.example.com
      - hydra
      - mock-bddtest-login-consent.example.com

  second.user.agent.example.com:
    container_name: second.user.agent.example.com
    image: ${USER_AGENT_SUPPORT_IMAGE}:latest
    environment:
      - AGENT_UI_URL=https://second.ui.user.agent.example.com:8071
      - HTTP_SERVER_HOST_URL=0.0.0.0:8070
      - TLS_CERT_FILE=/etc/keys/tls/ec-pubCert.pem
      - TLS_KEY_FILE=/etc/keys/tls/ec-key.pem
      - TLS_CACERTS=/etc/keys/tls/ec-cacert.pem
      - HTTP_SERVER_OIDC_OPURL=https://demo-hydra.trustbloc.local:5555/
      - HTTP_SERVER_OIDC_CLIENTID=client-id
      - HTTP_SERVER_OIDC_CLIENTSECRET=client-secret
      - HTTP_SERVER_OIDC_CALLBACK=https://second.user.agent.example.com:8070/oidc/callback
      - HTTP_SERVER_COOKIE_AUTH_KEY=/etc/keys/session_cookies/auth.key
      - HTTP_SERVER_COOKIE_ENC_KEY=/etc/keys/session_cookies/enc.key
      - HTTP_SERVER_RP_DISPLAY_NAME=trustbloc
      - HTTP_SERVER_RP_ORIGIN_NAME=https://second.ui.user.agent.example.com:8071/
      - HTTP_SERVER_RP_ID=second.ui.user.agent.example.com
      - HTTP_SERVER_AUTHZ_KMS_URL=https://authz-kms.trustbloc.local:${AUTHZ_HUB_KMS_PORT}
      - HTTP_SERVER_OPS_KMS_URL=https://ops-kms.trustbloc.local:${OPS_HUB_KMS_PORT}
      - HTTP_SERVER_KEY_EDV_URL=https://edv.example.com:${EDV_PORT}/encrypted-data-vaults
      - HTTP_SERVER_USER_EDV_URL=https://edv.example.com:${EDV_PORT}/encrypted-data-vaults
    ports:
      - 8070:8070
    volumes:
      - ../keys:/etc/keys
    command: start
    depends_on:
      - edv.example.com
      - hydra
      - mock-bddtest-login-consent.example.com

  bddtest.ui.user.agent.example.com:
    container_name: bddtest.ui.user.agent.example.com
    image: ${USER_AGENT_IMAGE}:latest
    volumes:
      - ../keys/tls:/etc/nginx/certs
    ports:
      - 8078:443
    environment:
      - ARIESD_HTTP_RESOLVER=${HTTP_RESOLVER}
      - AGENT_DEFAULT_LABEL=user-agent
      - BLOC_DOMAIN=testnet.trustbloc.local
      - EDGE_AGENT_SERVER=https://localhost:8077
      - WALLET_MEDIATOR_URL=${WALLET_ROUTER_URL}
      - TLS_CERT=/etc/nginx/certs/ec-pubCert.pem
      - TLS_KEY=/etc/nginx/certs/ec-key.pem
      - EDV_SERVER_URL=https://edv.example.com:8072/encrypted-data-vaults
      - STORAGE_TYPE=indexedDB

  bddtest.user.agent.example.com:
    container_name: bddtest.user.agent.example.com
    image: ${USER_AGENT_SUPPORT_IMAGE}:latest
    environment:
      - AGENT_UI_URL=https://localhost:8078
      - HTTP_SERVER_HOST_URL=0.0.0.0:8077
      - TLS_CERT_FILE=/etc/keys/tls/ec-pubCert.pem
      - TLS_KEY_FILE=/etc/keys/tls/ec-key.pem
      - TLS_CACERTS=/etc/keys/tls/ec-cacert.pem
      - HTTP_SERVER_OIDC_OPURL=https://hydra.trustbloc.local:4444/
      - HTTP_SERVER_OIDC_CLIENTID=client-id
      - HTTP_SERVER_OIDC_CLIENTSECRET=client-secret
      - HTTP_SERVER_OIDC_CALLBACK=https://localhost:8077/oidc/callback
      - HTTP_SERVER_COOKIE_AUTH_KEY=/etc/keys/session_cookies/auth.key
      - HTTP_SERVER_COOKIE_ENC_KEY=/etc/keys/session_cookies/enc.key
      - HTTP_SERVER_RP_DISPLAY_NAME=trustbloc
      - HTTP_SERVER_RP_ORIGIN_NAME=https://localhost:8077/
      - HTTP_SERVER_RP_ID=localhost
      - HTTP_SERVER_AUTHZ_KMS_URL=https://authz-kms.trustbloc.local:${AUTHZ_HUB_KMS_PORT}
      - HTTP_SERVER_OPS_KMS_URL=https://ops-kms.trustbloc.local:${OPS_HUB_KMS_PORT}
      - HTTP_SERVER_KEY_EDV_URL=https://edv.example.com:${EDV_PORT}/encrypted-data-vaults
      - HTTP_SERVER_USER_EDV_URL=https://edv.example.com:${EDV_PORT}/encrypted-data-vaults
      - ARIESD_LOG_LEVEL=DEBUG
    ports:
      - 8077:8077
    volumes:
      - ../keys:/etc/keys
    command: start
    depends_on:
      - edv.example.com
      - hydra
      - mock-bddtest-login-consent.example.com

  couchdb.example.com:
    container_name: couchdb.example.com
    image: ${COUCHDB_IMAGE}:${COUCHDB_IMAGE_TAG}
    ports:
      - ${COUCHDB_PORT}:${COUCHDB_PORT}
    environment:
      - COUCHDB_USER=${COUCHDB_USERNAME}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    volumes:
      - ./couchdb-config/config.ini:/opt/couchdb/etc/local.d/config.ini

  edv.example.com:
    container_name: edv.example.com
    image: ${EDV_REST_IMAGE}:${EDV_REST_IMAGE_TAG}
    environment:
      - EDV_HOST_URL=${EDV_HOST}:${EDV_PORT}
      - EDV_DATABASE_TYPE=${EDV_DATABASE_TYPE}
      - EDV_DATABASE_URL=${EDV_DATABASE_URL}
      - EDV_DATABASE_PREFIX=${EDV_DATABASE_PREFIX}
      - EDV_LOG_LEVEL=debug
      - EDV_TLS_CERT_FILE=/etc/tls/ec-pubCert.pem
      - EDV_TLS_KEY_FILE=/etc/tls/ec-key.pem
    ports:
      - ${EDV_PORT}:${EDV_PORT}
    volumes:
      - ../keys/tls:/etc/tls
    command: start
    depends_on:
      - couchdb.example.com

  sidetree:
    container_name: sidetree-mock
    hostname: sidetree-mock
    image: ${SIDETREE_MOCK_IMAGE}:${SIDETREE_MOCK_IMAGE_TAG}
    environment:
      - SIDETREE_MOCK_TLS_CERTIFICATE=/etc/sidetree/tls/ec-pubCert.pem
      - SIDETREE_MOCK_TLS_KEY=/etc/sidetree/tls/ec-key.pem
      - SIDETREE_MOCK_HOST=0.0.0.0
      - SIDETREE_MOCK_PORT=48326
      - SIDETREE_MOCK_DID_NAMESPACE=did:trustbloc:2M5ym
      - SIDETREE_MOCK_DID_ALIASES=did:trustbloc:testnet.trustbloc.local
    ports:
      - 48326:48326
    volumes:
      - ../keys/tls:/etc/sidetree/tls


  testnet.trustbloc.local:
    container_name: testnet.trustbloc.local
    hostname: testnet.trustbloc.local
    image: halverneus/static-file-server:v1.7.2
    environment:
      - PORT=443
      - FOLDER=/web
      - CORS=true
      - DEBUG=true
      - TLS_CERT=/etc/tls/ec-pubCert.pem
      - TLS_KEY=/etc/tls/ec-key.pem
    ports:
      - "443:443"
    volumes:
      - ./config:/web/.well-known/did-trustbloc
      - ../keys/tls:/etc/tls

  stakeholder.one:
    container_name: stakeholder.one
    hostname: stakeholder.one
    image: halverneus/static-file-server:v1.7.2
    environment:
      - PORT=8088
      - FOLDER=/web
      - CORS=true
      - TLS_CERT=/etc/tls/ec-pubCert.pem
      - TLS_KEY=/etc/tls/ec-key.pem
    ports:
      - "8088:8088"
    volumes:
      - ./config:/web/.well-known/did-trustbloc
      - ../keys/tls:/etc/tls


  dns-proxy-server:
    image: defreitas/dns-proxy-server:latest
    hostname: dns.mageddo
    ports:
      - "5380:5380"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/resolv.conf:/etc/resolv.conf

  uni-resolver-web.example.com:
    container_name: uni-resolver-web.example.com
    image: universalresolver/uni-resolver-web:latest
    ports:
      - "9080:8080"
    volumes:
      - ./config.json:/opt/uni-resolver-java/uni-resolver-web/config.json
      - ./run-uni-resolver-web.sh:/opt/uni-resolver-java/uni-resolver-web/docker/run-uni-resolver-web.sh

  uni-resolver-did-v1-driver:
    image: veresone/uni-resolver-did-v1-driver:latest
    ports:
      - "8084:8080"

  trustbloc.did.method.example.com:
    container_name: trustbloc.did.method.example.com
    image: ${BLOC_DID_METHOD_IMAGE}:${BLOC_DID_METHOD_IMAGE_TAG}
    environment:
      - DID_METHOD_HOST_URL=0.0.0.0:8060
      - DID_METHOD_TLS_CACERTS=/etc/tls/ec-cacert.pem
      - DID_METHOD_DOMAIN=testnet.trustbloc.local
      - ENABLE_SIGNATURES=false
      - DID_METHOD_DATABASE_TYPE=mem
      - DID_METHOD_DATABASE_PREFIX=driver
    ports:
      - 8060:8060
    entrypoint: ""
    command:  /bin/sh -c "sleep 10;did-method start"
    volumes:
      - ../keys/tls:/etc/tls

  demo-hydra:
    container_name: demo-hydra.trustbloc.local
    image: oryd/hydra:${HYDRA_IMAGE_TAG}
    ports:
      - 5555:5555 # Public port
      - 5556:5556 # Admin port
    command:  /bin/sh -c "hydra migrate sql --read-from-env --yes; tmp/hydra_configure.sh& hydra serve all"
    entrypoint: ""
    environment:
      - DSN=mysql://demohydra:demohydra-pwd@tcp(mysql:3306)/demohydra?max_conns=20&max_idle_conns=4
      - URLS_SELF_ISSUER=https://demo-hydra.trustbloc.local:5555/
      - URLS_CONSENT=http://localhost:3300/consent
      - URLS_LOGIN=http://localhost:3300/login
      - SECRETS_SYSTEM=testSecretsSystem
      - OIDC_SUBJECT_TYPES_SUPPORTED=public
      - OIDC_SUBJECT_TYPE_PAIRWISE_SALT=testSecretsSystem
      - SERVE_TLS_KEY_PATH=/etc/tls/ec-key.pem
      - SERVE_TLS_CERT_PATH=/etc/tls/ec-pubCert.pem
      - SERVE_PUBLIC_PORT=5555
      - SERVE_ADMIN_PORT=5556
    restart: unless-stopped
    volumes:
      - ../keys/tls:/etc/tls
      - ./hydra-config/demo_hydra_configure.sh:/tmp/hydra_configure.sh
    depends_on:
      - mock-bddtest-login-consent.example.com
      - mysql

  hydra:
    container_name: hydra.trustbloc.local
    image: oryd/hydra:${HYDRA_IMAGE_TAG}
    ports:
      - 4444:4444 # Public port
      - 4445:4445 # Admin port
    command:  /bin/sh -c "hydra migrate sql --read-from-env --yes; tmp/hydra_configure.sh& hydra serve all"
    entrypoint: ""
    environment:
      - DSN=mysql://hydra:hydra-pwd@tcp(mysql:3306)/hydra?max_conns=20&max_idle_conns=4
      - URLS_SELF_ISSUER=https://hydra.trustbloc.local:4444/
      - URLS_CONSENT=https://localhost:8099/mock/consent
      - URLS_LOGIN=https://localhost:8099/mock/login
      - SECRETS_SYSTEM=testSecretsSystem
      - OIDC_SUBJECT_TYPES_SUPPORTED=public
      - OIDC_SUBJECT_TYPE_PAIRWISE_SALT=testSecretsSystem
      - SERVE_TLS_KEY_PATH=/etc/tls/ec-key.pem
      - SERVE_TLS_CERT_PATH=/etc/tls/ec-pubCert.pem
    restart: unless-stopped
    volumes:
      - ../keys/tls:/etc/tls
      - ./hydra-config/bddtest_hydra_configure.sh:/tmp/hydra_configure.sh
    depends_on:
      - mock-bddtest-login-consent.example.com
      - mysql

  mysql:
    container_name: mysql
    image: mysql:${MYSQL_IMAGE_TAG}
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: secret
    logging:
      driver: "none"
    volumes:
      - ./mysql-config:/docker-entrypoint-initdb.d

  mock-bddtest-login-consent.example.com:
    container_name: mock-bddtest-login-consent.example.com
    image: ${MOCK_BDDTEST_LOGIN_CONSENT_IMAGE}:latest
    environment:
      - LISTEN_ADDR=:8099
      - HYDRA_ADMIN_URL=https://hydra.trustbloc.local:4445
      - TLS_CERT_PATH=/etc/tls/ec-pubCert.pem
      - TLS_KEY_PATH=/etc/tls/ec-key.pem
      - ROOT_CA_CERTS_PATH=/etc/tls/ec-cacert.pem
    ports:
      - 8099:8099
    volumes:
      - ../keys/tls:/etc/tls

  mock-demo-login-consent.example.com:
    container_name: mock-demo-login-consent.example.com
    image: ${MOCK_DEMO_LOGIN_CONSENT_IMAGE}:latest
    environment:
      - ADMIN_URL=https://demo-hydra.trustbloc.local:5556
      - SERVE_PORT=3300
      - TLS_CACERTS=/etc/tls/ec-cacert.pem
    ports:
      - 3300:3300
    volumes:
      - ../keys/tls:/etc/tls

  authz-kms.example.com:
    container_name: authz-kms.trustbloc.local
    image: ${HUB_KMS_IMAGE}:${HUB_KMS_IMAGE_TAG}
    environment:
      - KMS_HOST_URL=${HUB_KMS_HOST}:${AUTHZ_HUB_KMS_PORT}
      - KMS_CACERTS=/etc/tls/ec-cacert.pem
      - KMS_TLS_SERVE_CERT=/etc/tls/ec-pubCert.pem
      - KMS_TLS_SERVE_KEY=/etc/tls/ec-key.pem
      - KMS_DATABASE_TYPE=mem
      - KMS_SECRETS_DATABASE_TYPE=mem
      - KMS_OPERATIONAL_KMS_STORAGE_TYPE=mem
    ports:
      - ${AUTHZ_HUB_KMS_PORT}:${AUTHZ_HUB_KMS_PORT}
    entrypoint: ""
    command: /bin/sh -c "sleep 5;kms-rest start"
    volumes:
      - ../keys/tls:/etc/tls
    depends_on:
      - couchdb.example.com

  ops-kms.example.com:
    container_name: ops-kms.trustbloc.local
    image: ${HUB_KMS_IMAGE}:${HUB_KMS_IMAGE_TAG}
    environment:
      - KMS_HOST_URL=${HUB_KMS_HOST}:${OPS_HUB_KMS_PORT}
      - KMS_CACERTS=/etc/tls/ec-cacert.pem
      - KMS_TLS_SERVE_CERT=/etc/tls/ec-pubCert.pem
      - KMS_TLS_SERVE_KEY=/etc/tls/ec-key.pem
      - KMS_DATABASE_TYPE=mem
      - KMS_SECRETS_DATABASE_TYPE=mem
      - KMS_OPERATIONAL_KMS_STORAGE_TYPE=sds
      - KMS_OPERATIONAL_KMS_STORAGE_URL=https://edv.example.com:${EDV_PORT}
    ports:
      - ${OPS_HUB_KMS_PORT}:${OPS_HUB_KMS_PORT}
    entrypoint: ""
    command: /bin/sh -c "sleep 5;kms-rest start"
    volumes:
      - ../keys/tls:/etc/tls
    depends_on:
      - couchdb.example.com
